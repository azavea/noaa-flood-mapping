diff --git a/rastervision_core/rastervision/core/data/raster_source/multi_raster_source.py b/rastervision_core/rastervision/core/data/raster_source/multi_raster_source.py
index d55ee736..540125c5 100644
--- a/rastervision_core/rastervision/core/data/raster_source/multi_raster_source.py
+++ b/rastervision_core/rastervision/core/data/raster_source/multi_raster_source.py
@@ -22,6 +22,8 @@ class MultiRasterSource(ActivateMixin, RasterSource):
     def __init__(self,
                  raster_sources: Sequence[RasterSource],
                  raw_channel_order: Sequence[conint(ge=0)],
+                 allow_different_extents: bool = False,
+                 force_same_dtype: bool = False,
                  channel_order: Optional[Sequence[conint(ge=0)]] = None,
                  crs_source: conint(ge=0) = 0,
                  raster_transformers: Sequence = []):
@@ -31,6 +33,16 @@ class MultiRasterSource(ActivateMixin, RasterSource):
             raster_sources (Sequence[RasterSource]): Sequence of RasterSources.
             raw_channel_order (Sequence[conint(ge=0)]): Channel ordering that
                 will always be applied before channel_order.
+            allow_different_extents (bool):
+                When true, the sub-rasters are allowed to be of different sizes.  The
+                purpose of this flag is to allow use of rasters that cover the same area
+                but are of slightly different size (due to reprojection differences).
+                No special reprojection logic is triggered by this parameter.  It is
+                assumed that the underlying raster sources are guaranteed to supply chips
+                of the same size.  Use with caution.
+            force_same_dtype (bool): If true, force all subchips to have the same dtype
+                as the first subchip.  No careful conversion is done, just a quick cast.
+                Use with caution.
             channel_order (Sequence[conint(ge=0)], optional): Channel ordering
                 that will be used by .get_chip(). Defaults to None.
             raster_transformers (Sequence, optional): Sequence of transformers.
@@ -42,6 +54,8 @@ class MultiRasterSource(ActivateMixin, RasterSource):
 
         super().__init__(channel_order, num_channels, raster_transformers)
 
+        self.allow_different_extents = allow_different_extents
+        self.force_same_dtype = force_same_dtype
         self.raster_sources = raster_sources
         self.raw_channel_order = list(raw_channel_order)
         self.crs_source = crs_source
@@ -50,16 +64,18 @@ class MultiRasterSource(ActivateMixin, RasterSource):
 
     def validate_raster_sources(self) -> None:
         dtypes = [rs.get_dtype() for rs in self.raster_sources]
-        if not all_equal(dtypes):
+        if not self.force_same_dtype and not all_equal(dtypes):
             raise MultiRasterSourceError(
                 'dtypes of all sub raster sources must be equal. '
-                f'Got: {dtypes}')
+                f'Got: {dtypes} '
+                '(carfully consider using force_same_dtype)')
 
         extents = [rs.get_extent() for rs in self.raster_sources]
-        if not all_equal(extents):
+        if not self.allow_different_extents and not all_equal(extents):
             raise MultiRasterSourceError(
                 'extents of all sub raster sources must be equal. '
-                f'Got: {extents}')
+                f'Got: {extents} '
+                '(carefully consider using allow_different_extents)')
 
         sub_num_channels = sum(rs.num_channels for rs in self.raster_sources)
         if sub_num_channels != self.num_channels:
@@ -97,6 +113,11 @@ class MultiRasterSource(ActivateMixin, RasterSource):
             [height, width, channels] numpy array
         """
         chip_slices = [rs._get_chip(window) for rs in self.raster_sources]
+
+        if self.force_same_dtype:
+            for i in range(1, len(chip_slices)):
+                chip_slices[i] = chip_slices[i].astype(chip_slices[0].dtype)
+
         chip = np.concatenate(chip_slices, axis=-1)
         chip = chip[..., self.raw_channel_order]
         return chip
@@ -115,6 +136,11 @@ class MultiRasterSource(ActivateMixin, RasterSource):
             np.ndarray with shape [height, width, channels]
         """
         chip_slices = [rs.get_chip(window) for rs in self.raster_sources]
+
+        if self.force_same_dtype:
+            for i in range(1, len(chip_slices)):
+                chip_slices[i] = chip_slices[i].astype(chip_slices[0].dtype)
+
         chip = np.concatenate(chip_slices, axis=-1)
         chip = chip[..., self.raw_channel_order]
         chip = chip[..., self.channel_order]
diff --git a/rastervision_core/rastervision/core/data/raster_source/multi_raster_source_config.py b/rastervision_core/rastervision/core/data/raster_source/multi_raster_source_config.py
index 4face80f..94c3f791 100644
--- a/rastervision_core/rastervision/core/data/raster_source/multi_raster_source_config.py
+++ b/rastervision_core/rastervision/core/data/raster_source/multi_raster_source_config.py
@@ -33,6 +33,12 @@ class SubRasterSourceConfig(Config):
 class MultiRasterSourceConfig(RasterSourceConfig):
     raster_sources: Sequence[SubRasterSourceConfig] = Field(
         ..., description='List of SubRasterSourceConfigs to combine.')
+    allow_different_extents: bool = Field(
+        False, description='Allow sub-rasters to have different extents.')
+    force_same_dtype: bool = Field(
+        False,
+        description=
+        'Force all subchips to be of the same dtype as the first subchip.')
     crs_source: conint(ge=0) = Field(
         0,
         description=
@@ -86,6 +92,8 @@ class MultiRasterSourceConfig(RasterSourceConfig):
         multi_raster_source = MultiRasterSource(
             raster_sources=built_raster_sources,
             raw_channel_order=self.get_raw_channel_order(),
+            force_same_dtype=self.force_same_dtype,
+            allow_different_extents=self.allow_different_extents,
             channel_order=self.channel_order,
             crs_source=self.crs_source,
             raster_transformers=raster_transformers)
