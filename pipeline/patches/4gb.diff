diff --git a/rastervision_core/rastervision/core/data/raster_source/rasterio_source.py b/rastervision_core/rastervision/core/data/raster_source/rasterio_source.py
index 85e18a02..f55caabf 100644
--- a/rastervision_core/rastervision/core/data/raster_source/rasterio_source.py
+++ b/rastervision_core/rastervision/core/data/raster_source/rasterio_source.py
@@ -36,6 +36,14 @@ def download_and_build_vrt(image_uris, tmp_dir):
     return image_path
 
 
+def stream_and_build_vrt(images_uris, tmp_dir):
+    log.info('Building VRT...')
+    image_paths = images_uris
+    image_path = os.path.join(tmp_dir, 'index.vrt')
+    build_vrt(image_path, image_paths)
+    return image_path
+
+
 def load_window(image_dataset, window=None, is_masked=False):
     """Load a window of an image using Rasterio.
 
@@ -69,6 +77,7 @@ class RasterioSource(ActivateMixin, RasterSource):
                  uris,
                  raster_transformers,
                  tmp_dir,
+                 allow_streaming=False,
                  channel_order=None,
                  x_shift=0.0,
                  y_shift=0.0):
@@ -91,6 +100,7 @@ class RasterioSource(ActivateMixin, RasterSource):
         self.x_shift = x_shift
         self.y_shift = y_shift
         self.do_shift = self.x_shift != 0.0 or self.y_shift != 0.0
+        self.allow_streaming = allow_streaming
 
         num_channels = None
 
@@ -132,9 +142,15 @@ class RasterioSource(ActivateMixin, RasterSource):
         Return a single local path representing the image or a VRT of the data.
         """
         if len(self.uris) == 1:
-            return download_if_needed(self.uris[0], tmp_dir)
+            if self.allow_streaming:
+                return self.uris[0]
+            else:
+                return download_if_needed(self.uris[0], tmp_dir)
         else:
-            return download_and_build_vrt(self.uris, tmp_dir)
+            if self.allow_streaming:
+                return stream_and_build_vrt(self.uris, tmp_dir)
+            else:
+                return download_and_build_vrt(self.uris, tmp_dir)
 
     def get_crs_transformer(self):
         return self.crs_transformer
@@ -156,7 +172,7 @@ class RasterioSource(ActivateMixin, RasterSource):
             is_masked=self.is_masked)
 
     def _activate(self):
-        # Download images to temporary directory and delete it when done.
+        # Download images to temporary directory and delete them when done.
         self.image_tmp_dir = tempfile.TemporaryDirectory(dir=self.tmp_dir)
         self.imagery_path = self._download_data(self.image_tmp_dir.name)
         self.image_dataset = rasterio.open(self.imagery_path)
diff --git a/rastervision_core/rastervision/core/data/raster_source/rasterio_source_config.py b/rastervision_core/rastervision/core/data/raster_source/rasterio_source_config.py
index 2ff08ef1..00fce1d7 100644
--- a/rastervision_core/rastervision/core/data/raster_source/rasterio_source_config.py
+++ b/rastervision_core/rastervision/core/data/raster_source/rasterio_source_config.py
@@ -12,6 +12,10 @@ class RasterioSourceConfig(RasterSourceConfig):
         ('List of image URIs that comprise imagery for a scene. The format of each file '
          'can be any that can be read by Rasterio/GDAL. If > 1 URI is provided, a VRT '
          'will be created to mosaic together the individual images.'))
+    allow_streaming: bool = Field(
+        False,
+        description=(
+            'Allow streaming of assets rather than always downloading.'))
     x_shift: float = Field(
         0.0,
         descriptions=
@@ -31,6 +35,7 @@ class RasterioSourceConfig(RasterSourceConfig):
             self.uris,
             raster_transformers,
             tmp_dir,
+            allow_streaming=self.allow_streaming,
             channel_order=self.channel_order,
             x_shift=self.x_shift,
             y_shift=self.y_shift)
diff --git a/rastervision_gdal_vsi/rastervision/gdal_vsi/vsi_file_system.py b/rastervision_gdal_vsi/rastervision/gdal_vsi/vsi_file_system.py
index 7462ba80..75f01648 100644
--- a/rastervision_gdal_vsi/rastervision/gdal_vsi/vsi_file_system.py
+++ b/rastervision_gdal_vsi/rastervision/gdal_vsi/vsi_file_system.py
@@ -91,8 +91,14 @@ class VsiFileSystem(FileSystem):
             raise FileNotFoundError('{} does not exist'.format(vsipath))
 
         try:
+            retval = bytes()
             handle = gdal.VSIFOpenL(vsipath, 'rb')
-            return gdal.VSIFReadL(1, stats.size, handle)
+            bytes_left = stats.size
+            while bytes_left > 0:
+                bytes_to_read = min(bytes_left, 1 << 30)
+                retval += gdal.VSIFReadL(1, bytes_to_read, handle)
+                bytes_left -= bytes_to_read
+            return retval
         finally:
             gdal.VSIFCloseL(handle)
 
